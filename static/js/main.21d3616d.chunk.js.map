{"version":3,"sources":["store/webgl/types.ts","store/webgl/reducers.ts","store/projections/types.ts","store/projections/reducers.ts","store/radon/actions.ts","store/radon/reducers.ts","store/reducer.ts","components/radon/scene.tsx","containers/radon.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["WebGLActionType","MutationActionType","initialState","context","undefined","payloadSetter","t","state","action","type","payload","anchor","SET_ANCHOR","originalRotation","SET_ORIGINAL_ROTATION","rotationDelta","SET_ROTATION_DELTA","combineReducers","rotation","ROTATE","MODIFY_ROTATION","add","valueOf","translation","TRANSLATE","scale","SCALE","MODIFY_SCALE","boxUpdate","x","updateBox","updateBeamBox","initialBoxState","matrix","initialBeamBoxState","radon","beamBox","box","rays","inverted","reducer","webgl","SET_CONTEXT","projections","v","y","z","Vector3","getRow","m","row","subset","index","toArray","BoxMesh","color","w","h","d","a","b","c","geometry","BoxGeometry","translate","rotateX","rotateY","rotateZ","Mesh","co","Color","MeshPhongMaterial","specular","addScalar","emissive","shininess","wireframe","side","DoubleSide","meshColor","Beams","bbox","params","geo","PlaneGeometry","mat","MeshBasicMaterial","transparent","opacity","map","RadonScene","children","webGLRenderer","camera","scene","this","WebGLRenderer","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","Scene","PerspectiveCamera","position","light","DirectionalLight","set","normalize","OrbitControls","domElement","forEach","render","id","ref","appendChild","InvButton","props","style","padding","backgroundColor","fontSize","onClick","invert","Radon","rs","bb","screen","tl","beamData","requestAnimationFrame","rotateBox","rotateBeamBox","TextureLoader","Math","PI","maxRayCount","ceil","log2","rayCount","pow","floor","numRays","beams","obj","N","inv","canvas","document","createElement","height","width","getContext","imgData","createImageData","i","by","start","end","srcPos","destPos","intersections","Raycaster","sub","intersectObject","attStart","att","length","distance","defVal","j","data","putImageData","toDataURL","getBeamDataUrl","load","material","display","flexDirection","alignItems","min","max","value","onChange","e","setRayCount","parseInt","target","invertBeams","Component","theta","connect","dispatch","n","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAWYA,E,uDAAAA,K,2BAAAA,M,KCTZ,ICQYC,EDRRC,EAA2B,CAC3BC,aAASC,I,SCODH,K,gBAAAA,E,sBAAAA,E,cAAAA,E,4BAAAA,E,kCAAAA,E,wBAAAA,E,8CAAAA,E,wCAAAA,E,qBAAAA,M,wBCDZ,SAASI,EAAcC,GACrB,OAAO,SAASC,EAAgCC,GAC9C,YAAcJ,IAAVG,EAA4B,KAC5BC,EAAOC,OAASH,EAAUC,EACvBC,EAAOE,SAIlB,IAAMC,EAASN,EAAcJ,EAAmBW,YAC1CC,EAAmBR,EACvBJ,EAAmBa,uBAEfC,EAAgBV,EAAcJ,EAAmBe,oBAuCxCC,kBAA+C,CAC5DC,SAdF,WAAuE,IAArDA,EAAoD,uDAAnC,CAAC,EAAG,EAAG,GAAIV,EAAwB,uCACpE,IAAKA,EAAOE,QAAS,OAAOQ,EAE5B,OAAQV,EAAOC,MACb,KAAKR,EAAmBkB,OACtB,OAAOX,EAAOE,QAChB,KAAKT,EAAmBmB,gBACtB,OAAOC,YAAIH,EAAUV,EAAOE,SAASY,UACvC,QACE,OAAOJ,IAMXK,YAvCF,WAGS,IAFPA,EAEM,uDAFc,CAAC,EAAG,EAAG,GAC3Bf,EACM,uCACN,OAAIA,EAAOC,OAASR,EAAmBuB,UAAkBD,EAElC,OAAnBf,EAAOE,QAAyBa,EAE7Bf,EAAOE,SAgCde,MA7BF,WAAiE,IAAlDA,EAAiD,uDAAnC,CAAC,EAAG,EAAG,GAAIjB,EAAwB,uCAC9D,IAAKA,EAAOE,QAAS,OAAOe,EAE5B,OAAQjB,EAAOC,MACb,KAAKR,EAAmByB,MACtB,OAAOlB,EAAOE,QAChB,KAAKT,EAAmB0B,aACtB,OAAON,YAAII,EAAOjB,EAAOE,SAASY,UACpC,QACE,OAAOG,IAqBXd,SACAE,mBACAE,kBC3CIa,EAAY,SAACtB,GAAD,OAAmD,SACnEuB,GADmE,MAE/D,CACJpB,KAAMH,EACNI,QAASmB,KAGEC,EAAYF,EA5BC,cA6BbG,EAAgBH,EA5BE,mBCSzBI,EAAkBC,YAAO,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,KAczDC,EAAsBD,YAAO,CAAC,EAAE,GAAI,EAAG,GAAI,CAAC,IAAK,GAAI,GAAI,CAAC,EAAG,EAAG,KAoBvDE,EAPDlB,YAAgB,CAC5BmB,QAZc,SAAC7B,EAA2BC,GAC1C,YAAcJ,IAAVG,EAA4B2B,ED1BH,oBC2BtB1B,EAAOC,KACTY,YAAIb,EAAOE,QAASH,GACrBA,GASJ8B,IA3BU,SAAC9B,EAA2BC,GACtC,YAAcJ,IAAVG,EAA4ByB,EDbR,eCcjBxB,EAAOC,KACTY,YAAIb,EAAOE,QAASH,GACrBA,GAwBJ+B,KArBW,SAAC/B,EAA2BC,GACvC,YAAcJ,IAAVG,EAA4B,EDlBL,kBCmBpBC,EAAOC,KAAyBD,EAAOE,QAAUH,GAoBxDgC,SARe,SAAChC,EAA4BC,GAC5C,MD/B0B,iBC+BnBA,EAAOC,MAAyBF,IAAUA,KCpBpCiC,EARCvB,YAAgB,CAC9BwB,MLHa,WAGA,IAFXlC,EAEU,uDAFFL,EACRM,EACU,uCACV,QAAeJ,IAAXI,EACA,OAAOD,EAGX,OAAOC,EAAOC,MACV,KAAKT,EAAgB0C,YACjB,MAAO,CAACvC,QAASK,EAAOE,SAC5B,QACI,OAAOH,IKRjBoC,cACAR,U,8ECeIS,EAAI,SAACf,EAAWgB,EAAWC,GAAvB,OAAqC,IAAIC,IAAQlB,EAAGgB,EAAGC,IAkBjE,SAASE,EAAOC,EAAWC,GACvB,OAAQD,EAAEE,OAAOC,YAAMF,EAAK,CAAC,EAAG,EAAG,KAAKG,UAAyB,GAGrE,SAASC,EAAQjB,EAAakB,GAAiB,IAAD,EACxBP,EAAOX,EAAK,GADY,mBACnCR,EADmC,KAChCgB,EADgC,KAC7BC,EAD6B,OAExBE,EAAOX,EAAK,GAFY,mBAEnCmB,EAFmC,KAEhCC,EAFgC,KAE7BC,EAF6B,OAGxBV,EAAOX,EAAK,GAHY,mBAGnCsB,EAHmC,KAGhCC,EAHgC,KAG7BC,EAH6B,KAKtCC,EAAW,IAAIC,IAAYP,EAAGC,EAAGC,GAOrC,OALAI,EAASE,UAAUnC,EAAGgB,EAAGC,GACzBgB,EAASG,QAAQN,GACjBG,EAASI,QAAQN,GACjBE,EAASK,QAAQN,GAEV,IAAIO,IAAKN,EAhCnB,SAAmBP,GACf,IAAMc,EAAK,kBAAM,IAAIC,IAAMf,IAC3B,OAAO,IAAIgB,IAAkB,CAEzBC,SAAUH,IAEVd,MAAOc,IAAKI,WAAW,IAEvBC,SAAUL,IAAKI,WAAW,IAC1BE,UAAW,GACXC,WAAW,EACXC,KAAMC,MAqBeC,CAAUxB,GAAS,WAkEjD,IAAMyB,EAAQ,SAACC,EAAcC,GAAyC,MAEnDlC,EAAOiC,EAAM,GAFsC,mBAE3DzB,EAF2D,KAExDC,EAFwD,KAG5D0B,EAAM,IAAIC,IAAc5B,EAAGC,GAG3B4B,EAAM,IAAIC,IAAmBJ,GAAU,CAACK,aAAa,EAAMC,QAAS,EAAGC,IAAK,OAClF,OAAO,IAAIrB,IAAKe,EAAKE,IAGnBK,E,WAKF,WAAYC,GAAmC,IAAD,gCAJ9CC,mBAI8C,OAH9CC,YAG8C,OAF9CC,WAE8C,EAC1CC,KAAKH,cAAgB,IAAII,IACzBD,KAAKH,cAAcK,QAASC,OAAOC,WAAYD,OAAOE,aACtDL,KAAKH,cAAcS,cAAeH,OAAOI,kBAEzCP,KAAKD,MAAQ,IAAIS,IAEjBR,KAAKF,OAAS,IAAIW,IAAmB,GAAIN,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KACtFL,KAAKF,OAAOY,SAAS5E,EAAI,EACzBkE,KAAKF,OAAOY,SAAS5D,EAAI,EACzBkD,KAAKF,OAAOY,SAAS3D,EAAI,IAEzB,IAAI4D,EAAQ,IAAIC,IAAiB,SAAU,GAE3CD,EAAMD,SAASG,IAAI,EAAG,EAAG,GAAGC,YAC5Bd,KAAKD,MAAMzE,IAAIqF,GACf,IAAII,IAAcf,KAAKF,OAAQE,KAAKH,cAAcmB,YAElDpB,EAASqB,QAAQ,SAAAnD,GAAC,OAAI,EAAKiC,MAAMzE,IAAIwC,K,qDAG/B,IAAD,OAEL,OADAkC,KAAKH,cAAcqB,OAAOlB,KAAKD,MAAOC,KAAKF,QACnC,yBAAKqB,GAAG,kBAAkBC,IAAK,SAAAzD,GAAC,OAAIA,EAAIA,EAAE0D,YAAY,EAAKxB,cAAcmB,YAAc,U,KAoBjGM,EAAsC,SAACC,GAAD,OACxC,yBAAKC,MAAO,CAACC,QAAS,SAClB,4BAAQD,MAAO,CACXhE,MAAO+D,EAAM/E,SAAW,QAAU,QAClCkF,gBAAiBH,EAAM/E,SAAW,QAAU,QAC5CmF,SAAU,QAEVC,QAASL,EAAMM,QALnB,YAUaC,E,YAQjB,WAAYP,GAAoB,IAAD,uBAC3B,4CAAMA,KARVQ,QAO+B,IAN/BlE,OAM+B,IAL/BmE,QAK+B,IAJ/BC,YAI+B,IAH/BC,QAG+B,IAF/BC,cAE+B,EAO3BC,sBAJkB,SAAZC,IACF,EAAKd,MAAMe,cAAc,KACzBF,sBAAsBC,KAI1B,EAAKF,SAAW,GAChB,EAAKD,GAAK,IAAIK,IACd,EAAK1E,EAAIN,EAAQ,EAAKgE,MAAMjF,IAAK,KACjC,EAAK0F,GAAK/C,EAAM,EAAKsC,MAAMlF,SAZA,MAcTY,EAAO,EAAKsE,MAAMlF,QAAS,GAdlB,mBAcpBP,EAdoB,KAcjBgB,EAdiB,KAcdC,EAdc,OAeTE,EAAO,EAAKsE,MAAMlF,QAAS,GAflB,mBAepBoB,EAfoB,KAejBC,EAfiB,KAedC,EAfc,YAiB3B,EAAKsE,OAAShD,EAAM/C,YAAO,CAAC,CAACJ,EAAE2B,EAAGX,EAAGC,GAAG,CAACU,EAAEC,EAAEC,GAAG,CAAC,GAAG6E,KAAKC,GAAG,KAAM,CAACjD,aAAa,EAAOhC,MAAO,WAC9F,EAAKuE,GAAK,IAAIpC,EAAW,CACrB,EAAK9B,EACL,EAAKmE,KApBkB,E,sEAwBrB,IAAD,OAELhC,KAAKnC,EAAEO,QAAQ,KAEf,IAAMV,EAAIT,EAAO+C,KAAKuB,MAAMlF,QAAS,GAAG,GAClCqG,EAAcF,KAAKG,KAAKH,KAAKI,KAAKlF,IAClCmF,EAAWL,KAAKM,IAAI,EAAGN,KAAKO,MAAM/C,KAAKuB,MAAMyB,UAE7CC,EAASjD,KAAKgC,GACdG,EA7Kd,SAAwBe,EAAehE,EAAciE,EAAWC,GAAe,IAAD,EACxDnG,EAAOiC,EAAM,GAD2C,mBACnEpD,EADmE,KAChEgB,EADgE,KAC7DC,EAD6D,OAG3DE,EAAOiC,EAAM,GAH8C,mBAGnEzB,EAHmE,KAGhEC,EAHgE,KAMtE2F,EAASC,SAASC,cAAc,UACpCF,EAAOG,OAAS9F,EAChB2F,EAAOI,MAAQhG,EAEf,IAAMrD,EAAUiJ,EAAOK,WAAW,MAClC,GAAgB,OAAZtJ,EAAJ,CAGA,IAFA,IAAMuJ,EAAUvJ,EAAQwJ,gBAAgBnG,EAAGC,GAElCmG,EAAI,EAAGA,EAAIV,EAAGU,IAAK,CACxB,IAAMC,EAAKtB,KAAKO,MAAMjG,EAAG+G,GAAGnG,EAAEyF,GAAIzF,GAAG,EAAEyF,IAEjCY,EAAQD,EAAGrG,EAAE,EACbuG,EAAMD,EAAU,EAAFtG,EAEdwG,EAASpH,EAAEf,EAAI4B,EAAE,EAAGoG,EAAI/G,GACxBmH,EAAWrH,EAAEf,EAAI2B,EAAIC,EAAE,EAAGoG,EAAI/G,GAG9BoH,EADM,IAAIC,IAAUH,EAAQC,EAAQG,IAAIJ,GAAQnD,aAC5BwD,gBAAgBpB,GAEtCzD,EAAU,IACV8E,EAAWP,EAEXQ,EAAM,EACV,OAAQL,EAAcM,QAClB,KAAK,EAEDD,GADOL,EAAc,GAAGO,SAAWP,EAAc,GAAGO,UACzC,GACXjF,EAAU2D,EAAU,IAAJoB,EAAkB,KAAP,EAAEA,GAC7BD,EAAWJ,EAAc,GAAGO,SAC5B,MACJ,KAAK,EAEDF,GADOL,EAAc,GAAGO,SAAWP,EAAc,GAAGO,UACzC,GACXjF,EAAU2D,EAAU,IAAJoB,EAAkB,KAAP,EAAEA,GAC7BD,EAAWJ,EAAc,GAAGO,SAMpC,IAFA,IAAMC,EAASvB,EAAM,EAAI,IAEhBwB,EAAIb,EAAOa,EAAIZ,EAAKY,GAAG,EAC5BjB,EAAQkB,KAAKD,GAAK,IAClBjB,EAAQkB,KAAKD,EAAE,GAAK,IACpBjB,EAAQkB,KAAKD,EAAE,GAAK,IACpBjB,EAAQkB,KAAKD,EAAE,IAAMA,EAAEb,GAAO,GAAKQ,EAAS,EAAI9E,EAAUkF,EAQlE,OAFAvK,EAAQ0K,aAAanB,EAAS,EAAG,GAE1BN,EAAO0B,aAkHOC,CAAehF,KAAKnC,EAAGmC,KAAKuB,MAAMlF,QAASwG,EAAU7C,KAAKuB,MAAM/E,UAUjF,OAPI2F,GAAYA,IAAanC,KAAKmC,WAC9BnC,KAAKkC,GAAG+C,KAAK9C,EAAU,SAAC5H,GACpB0I,EAAMiC,SAAW,IAAI3F,IAAkB,CAACG,IAAKnF,EAAGiF,aAAa,MAEjEQ,KAAKmC,SAAWA,GAIhB,6BACI,yBAAKhB,GAAG,WAAWK,MAAO,CAACd,SAAU,WAAYyE,QAAS,OAAQC,cAAe,SAAUC,WAAY,SAAU5D,QAAS,SACtH,wBAAID,MAAO,CAAChE,MAAO,UAAYqF,EAA/B,QAA8CA,EAAW,EAAI,IAAM,IACnE,2BAAOnI,KAAK,QAAQ4K,IAAK,EAAGC,IAAK7C,EAAa8C,MAAOxF,KAAKuB,MAAMyB,QAASyC,SAAU,SAAAC,GAAC,OAAI,EAAKnE,MAAMoE,YAAYC,SAASF,EAAEG,OAAOL,WACjI,kBAAC,EAAD,CAAW3D,OAAQ7B,KAAKuB,MAAMuE,YAAatJ,SAAUwD,KAAKuB,MAAM/E,YAEnEwD,KAAK+B,GAAGb,c,GA1DU6E,aCxL7B7H,EAAU,SAAC8H,GAAD,OACd9J,YAAO,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC8J,EAAO,EAAG,MAgB5BC,cAdE,SAACzL,GAAD,MAAwB,CACvC8B,IAAK9B,EAAM4B,MAAME,IACjBD,QAAS7B,EAAM4B,MAAMC,QACrB2G,QAASxI,EAAM4B,MAAMG,KACrBC,SAAUhC,EAAM4B,MAAMI,WAGJ,SAAC0J,GAAD,MAA8C,CAChE7D,UAAW,SAAC2D,GAAD,OAAmBE,EAASnK,EAAUmC,EAAQ8H,MACzD1D,cAAe,SAAC0D,GAAD,OAAmBE,EAASlK,EAAckC,EAAQ8H,MACjEL,YAAa,SAACQ,GAAD,OAAeD,EJQH,SAACC,GAAD,MAA2B,CACpDzL,KA9B2B,gBA+B3BC,QAASwL,GIV4BR,CAAYQ,KACjDL,YAAa,kBAAMI,EJYgC,CAACxL,KAjC1B,oBIwBbuL,CAGbtG,GCtBIyG,EAAoBjG,OAAekG,sCAAwCC,IAC3EC,EAAQC,YAAY/J,EAAS2J,EACjCK,YAAgBC,OAcHC,EARO,WACpB,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QCTcK,QACW,cAA7BzG,OAAO0G,SAASC,UAEe,UAA7B3G,OAAO0G,SAASC,UAEhB3G,OAAO0G,SAASC,SAASC,MACvB,2DCZNC,IAAS9F,OAAO,kBAAC,EAAD,MAASoC,SAAS2D,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.21d3616d.chunk.js","sourcesContent":["export type Mat4 = [\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n];\n\nexport interface WebGLState {\n    context: WebGLRenderingContext | undefined;\n}\n\nexport enum WebGLActionType {\n    SET_CONTEXT = 'SET_CONTEXT'\n}\n\nexport interface SetWebGLContextAction {\n    type: WebGLActionType;\n    payload: WebGLRenderingContext;\n}\n\nexport type WebGLAction = SetWebGLContextAction","import {WebGLState, WebGLAction, WebGLActionType} from 'store/webgl/types'\n\nvar initialState: WebGLState = {\n    context: undefined,\n};\n\nexport default function reducer(\n    state = initialState,\n    action: WebGLAction\n): WebGLState {\n    if (action === undefined ) {\n        return state;\n    }\n\n    switch(action.type) {\n        case WebGLActionType.SET_CONTEXT:\n            return {context: action.payload};\n        default:\n            return state;\n    }\n}","import {Vec3} from 'store/types';\nexport interface MutationState {\n  rotation: Vec3;\n  translation: Vec3;\n  scale: Vec3;\n  rotationDelta: Vec3 | null;\n  originalRotation: Vec3 | null;\n  anchor: Vec3 | null;\n}\n\nexport enum MutationActionType {\n  ROTATE = 'ROTATE',\n  TRANSLATE = 'TRANSLATE',\n  SCALE = 'SCALE',\n  MODIFY_SCALE = 'MODIFY_SCALE',\n  MODIFY_ROTATION = 'MODIFY_ROTATION',\n  SET_ANCHOR = 'SET_ANCHOR',\n  SET_ORIGINAL_ROTATION = 'SET_ORIGINAL_ROTATION',\n  SET_ROTATION_DELTA = 'SET_ROTATION_DELTA',\n  CALC_ROT = 'CALC_ROT',\n}\n\nexport interface MutationAction {\n  type: MutationActionType;\n  payload: Vec3 | null;\n}\n","import {\n  MutationState,\n  MutationAction,\n  MutationActionType,\n} from 'store/projections/types';\nimport {Vec3} from 'store/types';\nimport {add} from 'mathjs';\nimport {combineReducers} from 'redux';\n\nfunction payloadSetter(t: MutationActionType) {\n  return function(state: Vec3 | undefined | null, action: MutationAction) {\n    if (state === undefined) return null;\n    if (action.type !== t) return state;\n    return action.payload;\n  };\n}\n\nconst anchor = payloadSetter(MutationActionType.SET_ANCHOR);\nconst originalRotation = payloadSetter(\n  MutationActionType.SET_ORIGINAL_ROTATION,\n);\nconst rotationDelta = payloadSetter(MutationActionType.SET_ROTATION_DELTA);\n\nfunction translation(\n  translation: Vec3 = [0, 0, 0],\n  action: MutationAction,\n): Vec3 {\n  if (action.type !== MutationActionType.TRANSLATE) return translation;\n\n  if (action.payload === null) return translation;\n\n  return action.payload;\n}\n\nfunction scale(scale: Vec3 = [1, 1, 1], action: MutationAction) {\n  if (!action.payload) return scale;\n\n  switch (action.type) {\n    case MutationActionType.SCALE:\n      return action.payload;\n    case MutationActionType.MODIFY_SCALE:\n      return add(scale, action.payload).valueOf() as Vec3;\n    default:\n      return scale;\n  }\n}\n\nfunction rotation(rotation: Vec3 = [0, 0, 0], action: MutationAction) {\n  if (!action.payload) return rotation;\n\n  switch (action.type) {\n    case MutationActionType.ROTATE:\n      return action.payload;\n    case MutationActionType.MODIFY_ROTATION:\n      return add(rotation, action.payload).valueOf() as Vec3;\n    default:\n      return rotation;\n  }\n}\n\nexport default combineReducers<MutationState, MutationAction>({\n  rotation,\n  translation,\n  scale,\n  anchor,\n  originalRotation,\n  rotationDelta,\n});\n","import {Matrix} from 'mathjs';\n\nexport const UPDATE_BOX = 'UPDATE_BOX';\nexport const UPDATE_BEAM_BOX = 'UPDATE_BEAM_BOX';\nexport const SET_RAY_COUNT = 'SET_RAY_COUNT';\nexport const INVERT_BEAMS = 'INVERT_BEAMS';\n\nexport interface rayAction {\n  type: typeof SET_RAY_COUNT;\n  payload: number;\n}\n\nexport interface boxAction {\n  type: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX;\n  payload: Matrix;\n}\n\nexport interface invertBeamsAction {\n  type: typeof INVERT_BEAMS;\n}\n\nexport type RadonAction = boxAction | rayAction | invertBeamsAction;\n\nconst boxUpdate = (t: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX) => (\n  x: Matrix,\n) => ({\n  type: t,\n  payload: x,\n});\n\nexport const updateBox = boxUpdate(UPDATE_BOX);\nexport const updateBeamBox = boxUpdate(UPDATE_BEAM_BOX);\n\nexport const setRayCount = (n: number): rayAction => ({\n  type: SET_RAY_COUNT,\n  payload: n,\n});\n\nexport const invertBeams = (): invertBeamsAction => ({type: INVERT_BEAMS});\n","import {add, Matrix, matrix} from 'mathjs';\nimport {combineReducers} from 'redux';\nimport {\n  boxAction,\n  rayAction,\n  invertBeamsAction,\n  UPDATE_BOX,\n  UPDATE_BEAM_BOX,\n  SET_RAY_COUNT,\n  INVERT_BEAMS,\n} from 'store/radon/actions';\n\nconst initialBoxState = matrix([[0, 0, 0], [32, 16, 8], [0, 0, 0]]);\n\nconst box = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBoxState;\n  return action.type === UPDATE_BOX\n    ? (add(action.payload, state) as Matrix)\n    : state;\n};\n\nconst rays = (state: number | undefined, action: rayAction) => {\n  if (state === undefined) return 7;\n  return action.type === SET_RAY_COUNT ? action.payload : state;\n};\n\nconst initialBeamBoxState = matrix([[-64, 0, 0], [128, 64, 4], [0, 0, 0]]);\n\nconst beamBox = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBeamBoxState;\n  return action.type === UPDATE_BEAM_BOX\n    ? (add(action.payload, state) as Matrix)\n    : state;\n};\n\nconst inverted = (state: boolean | undefined, action: invertBeamsAction) => {\n  return action.type === INVERT_BEAMS ? !state : !!state;\n};\n\nconst radon = combineReducers({\n  beamBox,\n  box,\n  rays,\n  inverted,\n});\n\nexport default radon;\nexport type radonState = ReturnType<typeof radon>;\n","import webgl from 'store/webgl/reducers';\nimport {WebGLAction} from 'store/webgl/types';\nimport projections from 'store/projections/reducers';\nimport radon from 'store/radon/reducers';\nimport {RadonAction} from 'store/radon/actions';\nimport {MutationAction} from 'store/projections/types';\nimport {combineReducers} from 'redux';\n\nconst reducer = combineReducers({\n  webgl,\n  projections,\n  radon,\n});\n\nexport type ReduxState = ReturnType<typeof reducer>;\nexport type ReduxAction = WebGLAction | MutationAction | RadonAction;\nexport default reducer;\n","import React, {Component} from 'react';\nimport {Matrix, matrix, index} from 'mathjs';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {\n    Object3D,\n    Vector3,\n    Color,\n    MeshPhongMaterial,\n    DoubleSide,\n    BoxGeometry,\n    Mesh,\n    WebGLRenderer,\n    Camera,\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    Raycaster,\n    TextureLoader,\n    Texture,\n    MeshBasicMaterial,\n    PlaneGeometry,\n    MeshBasicMaterialParameters,\n} from 'three';\n\n\nconst v = (x: number, y: number, z: number) => new Vector3(x, y, z)\n\n function meshColor(color: number) {\n     const co = () => new Color(color)\n     return new MeshPhongMaterial({\n         // light\n         specular: co(),\n         // intermediate\n         color: co().addScalar(-.3),\n         // dark\n         emissive: co().addScalar(-.8),\n         shininess: 50,\n         wireframe: false,\n         side: DoubleSide,\n         //map: ImageUtils.loadTexture('http://i.imgur.com/xCE2Br4.jpg?1')\n     });\n }\n\nfunction getRow(m: Matrix, row: number): number[] {\n    return (m.subset(index(row, [0, 1, 2])).toArray() as number[][])[0]\n}\n\nfunction BoxMesh(box: Matrix, color?: number) {\n    const [x, y, z] = getRow(box, 0)\n    const [w, h, d] = getRow(box, 1)\n    const [a, b, c] = getRow(box, 2)\n\n    var geometry = new BoxGeometry(w, h, d)\n\n    geometry.translate(x, y, z)\n    geometry.rotateX(a)\n    geometry.rotateY(b)\n    geometry.rotateZ(c)\n\n    return new Mesh(geometry, meshColor(color || 0xffffff))\n }\n\n\nfunction getBeamDataUrl(obj: Object3D, bbox: Matrix, N: number, inv: boolean) {\n    const [x, y, z] = getRow(bbox, 0)\n    /* const y = getRow(bbox, 0)[1] */\n    const [w, h] = getRow(bbox, 1)\n\n    /* // Create canvas */\n    let canvas = document.createElement('canvas');\n    canvas.height = h;\n    canvas.width = w;\n\n    const context = canvas.getContext('2d');\n    if( context === null ) return;\n    const imgData = context.createImageData(w, h);\n\n    for( let i = 0; i < N; i++) {\n        const by = Math.floor(y+(i*(h/N))+h/(2*N))\n\n        const start = by*w*4\n        const end = start + w*4\n\n        const srcPos = v(x, (h/2)-by, z)\n        const destPos =  v(x + w, (h/2)-by, z)\n\n        const ray = new Raycaster(srcPos, destPos.sub(srcPos).normalize())\n        const intersections = ray.intersectObject(obj)\n\n        let opacity = 255\n        let attStart = end\n        let dist = 0\n        let att = 0\n        switch( intersections.length ) {\n            case 2:\n                dist = intersections[1].distance - intersections[0].distance\n                att = dist/40\n                opacity = inv ? att*255 : (1-att)*255\n                attStart = intersections[1].distance\n                break;\n            case 4:\n                dist = intersections[2].distance - intersections[1].distance\n                att = dist/40\n                opacity = inv ? att*255 : (1-att)*255\n                attStart = intersections[2].distance\n                break;\n        }\n\n        const defVal = inv ? 0 : 255\n\n        for (let j = start; j < end; j+=4) {\n            imgData.data[j] = 255\n            imgData.data[j+1] = 255\n            imgData.data[j+2] = 255\n            imgData.data[j+3] = (j-start)/4 >= attStart-2 ? opacity : defVal\n        }\n\n    }\n\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    return canvas.toDataURL()\n}\n\nconst Beams = (bbox: Matrix, params?: MeshBasicMaterialParameters) => {\n    /* const [x, y, z] = getRow(bbox, 0) */\n    const [w, h] = getRow(bbox, 1)\n    const geo = new PlaneGeometry(w, h)\n    /* geo.translate(x, y, z) */\n\n    const mat = new MeshBasicMaterial( params || {transparent: true, opacity: 0, map: null} );\n    return new Mesh(geo, mat)\n}\n\nclass RadonScene {\n    webGLRenderer: WebGLRenderer\n    camera: Camera\n    scene: Scene\n\n    constructor(children: Array<Object3D | Mesh>) {\n        this.webGLRenderer = new WebGLRenderer()\n        this.webGLRenderer.setSize( window.innerWidth, window.innerHeight )\n        this.webGLRenderer.setPixelRatio( window.devicePixelRatio );\n\n        this.scene = new Scene()\n\n        this.camera = new PerspectiveCamera( 80, window.innerWidth / window.innerHeight, 0.1, 1000 )\n        this.camera.position.x = 0\n        this.camera.position.y = 0\n        this.camera.position.z = 100\n\n        var light = new DirectionalLight(0xfdfdfd, 2);\n        // you set the position of the light and it shines into the origin\n        light.position.set(2, 2, 1).normalize();\n        this.scene.add(light);\n        new OrbitControls(this.camera, this.webGLRenderer.domElement)\n\n        children.forEach(c => this.scene.add(c as Object3D));\n    }\n\n    render() {\n        this.webGLRenderer.render(this.scene, this.camera)\n        return (<div id=\"scene-container\" ref={d => d ? d.appendChild(this.webGLRenderer.domElement) : \"\"}></div>)\n    }\n}\n\ninterface RadonProps {\n    box: Matrix;\n    beamBox: Matrix;\n    numRays: number;\n    inverted: boolean;\n    rotateBox: (r: number) => void;\n    rotateBeamBox: (r: number) => void;\n    setRayCount: (n: number) => void;\n    invertBeams: () => void;\n}\n\ninterface InvButtonProps {\n    inverted: boolean;\n    invert: () => void\n}\n\nconst InvButton: React.FC<InvButtonProps> = (props: InvButtonProps) => (\n    <div style={{padding: '16px'}}>\n        <button style={{\n            color: props.inverted ? 'white' : 'black',\n            backgroundColor: props.inverted ? 'black' : 'white',\n            fontSize: '16px',\n        }}\n            onClick={props.invert}>\n            Invert\n        </button>\n    </div>)\n\nexport default class Radon extends Component<RadonProps> {\n    rs: RadonScene\n    b: Object3D\n    bb: Object3D\n    screen: Object3D\n    tl: TextureLoader\n    beamData: string\n\n    constructor(props: RadonProps) {\n        super(props)\n\n        const rotateBox = () => {\n            this.props.rotateBeamBox(.01)\n            requestAnimationFrame(rotateBox)\n        }\n        requestAnimationFrame(rotateBox)\n\n        this.beamData = ''\n        this.tl = new TextureLoader()\n        this.b = BoxMesh(this.props.box, 0x0000ff)\n        this.bb = Beams(this.props.beamBox)\n\n        const [x, y, z] = getRow(this.props.beamBox, 0)\n        const [w, h, d] = getRow(this.props.beamBox, 1)\n\n        this.screen = Beams(matrix([[x+w, y, z],[w,h,d],[0,-Math.PI,0]]), {transparent: false, color: 0xffffff})\n        this.rs = new RadonScene([\n            this.b,\n            this.bb,\n        ])\n    }\n\n    render() {\n        /* this.bb.rotateZ(.01) */\n        this.b.rotateZ(.01)\n\n        const h = getRow(this.props.beamBox, 1)[1]\n        const maxRayCount = Math.ceil(Math.log2(h))\n        const rayCount = Math.pow(2, Math.floor(this.props.numRays))\n\n        const beams = (this.bb as Mesh)\n        const beamData = getBeamDataUrl(this.b, this.props.beamBox, rayCount, this.props.inverted)\n\n        // only create new beam image if beams have been updated\n        if( beamData && beamData !== this.beamData ) {\n            this.tl.load(beamData, (t: Texture) => {\n                beams.material = new MeshBasicMaterial({map: t, transparent: true})\n            })\n            this.beamData = beamData\n        }\n\n        return (\n            <div>\n                <div id='controls' style={{position: 'absolute', display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '16px'}}>\n                    <h1 style={{color: 'white'}} >{rayCount} Beam{rayCount > 1 ? 's' : ''}</h1>\n                    <input type='range' min={0} max={maxRayCount} value={this.props.numRays} onChange={e => this.props.setRayCount(parseInt(e.target.value))} />\n                    <InvButton invert={this.props.invertBeams} inverted={this.props.inverted} />\n                </div>\n                {this.rs.render()}\n            </div>)\n    }\n}\n","import {connect} from 'react-redux';\nimport {matrix} from 'mathjs';\nimport {ReduxState} from 'store/reducer';\nimport {\n  updateBox,\n  updateBeamBox,\n  setRayCount,\n  RadonAction,\n  invertBeams,\n} from 'store/radon/actions';\nimport RadonScene from 'components/radon/scene';\n\nconst rotateX = (theta: number) =>\n  matrix([[0, 0, 0], [0, 0, 0], [theta, 0, 0]]);\n\nconst mapState = (state: ReduxState) => ({\n  box: state.radon.box,\n  beamBox: state.radon.beamBox,\n  numRays: state.radon.rays,\n  inverted: state.radon.inverted,\n});\n\nconst mapDispatch = (dispatch: (action: RadonAction) => void) => ({\n  rotateBox: (theta: number) => dispatch(updateBox(rotateX(theta))),\n  rotateBeamBox: (theta: number) => dispatch(updateBeamBox(rotateX(theta))),\n  setRayCount: (n: number) => dispatch(setRayCount(n)),\n  invertBeams: () => dispatch(invertBeams()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatch,\n)(RadonScene);\n","import React from 'react';\nimport './App.css';\nimport reducer from 'store/reducer';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk'\nimport RadonScene from 'containers/radon';\n// import ConfigPanel from 'containers/mutations/config-panel';\n// import ShaderCanvas from 'containers/canvas/shader-canvas'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(thunk),\n))\n\n/* <ConfigPanel />\n<ShaderCanvas /> */\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <RadonScene />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}