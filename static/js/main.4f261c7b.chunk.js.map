{"version":3,"sources":["store/radon/actions.ts","components/radon/controls.tsx","components/radon/utils.ts","containers/controls.ts","components/radon/inverse.tsx","containers/inverse.ts","components/radon/scene.tsx","containers/radon.ts","store/radon/socket.ts","store/radon/reducers.ts","store/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["boxUpdate","t","x","type","payload","updateBox","InvButton","props","style","padding","cursor","color","inverted","backgroundColor","fontSize","borderRadius","onClick","invert","RayCountSlider","rayCount","min","max","maxRayCount","value","numRays","onChange","e","setRayCount","parseInt","target","Record","recording","toggleRecording","height","width","RadonControls","id","v","y","z","Vector3","getRow","m","row","subset","index","toArray","BoxMesh","box","w","h","d","a","b","c","geometry","BoxGeometry","translate","rotateX","rotateY","rotateZ","Mesh","co","Color","MeshPhongMaterial","specular","addScalar","emissive","shininess","wireframe","side","DoubleSide","meshColor","Beams","bbox","material","geo","PlaneGeometry","mat","MeshBasicMaterial","transparent","opacity","map","connect","state","beamBox","Math","ceil","log2","rays","pow","floor","opacities","dispatch","n","invertBeams","Controls","IControls","setFilter","filter","checked","Inverse","display","flexDirection","alignItems","ref","reconstruction","canvas","length","context","getContext","imgData","createImageData","i","data","putImageData","maxTheta","RadonScene","children","webGLRenderer","camera","scene","this","WebGLRenderer","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","Scene","PerspectiveCamera","position","light","DirectionalLight","set","normalize","add","OrbitControls","domElement","forEach","render","appendChild","Radon","rs","bb","screen","tl","beamData","nr","TextureLoader","N","matrix","PI","requestAnimationFrame","rotateBox","ms","deltaV","beams","obj","opts","document","createElement","ops","by","start","end","srcPos","destPos","intersections","Raycaster","sub","intersectObject","inv","attStart","att","distance","defVal","j","push","saveOpacity","toDataURL","getBeamDataUrl","load","doneRecording","endRecording","screenData","numAngles","col","op","pxl","getScreenDataUrl","Component","theta","o","setDeltaV","dv","ws","WebSocket","str2ab","s","buf","ArrayBuffer","bufView","Uint8ClampedArray","strLen","charCodeAt","onopen","console","log","onclose","onmessage","evt","resp","image","JSON","parse","atob","deserialize","store","onerror","initialBoxState","initialBeamBoxState","radon","combineReducers","action","undefined","anglesIdx","angles","modAngles","Array","out","of","unshift","pop","cyclesPerSec","reducer","req","total","sino_row","send","stringify","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f261c7b.chunk.js","sourcesContent":["import {Matrix} from 'mathjs';\n\n// action types\n\nexport const UPDATE_BOX = 'UPDATE_BOX';\nexport const UPDATE_BEAM_BOX = 'UPDATE_BEAM_BOX';\nexport const SET_RAY_COUNT = 'SET_RAY_COUNT';\nexport const INVERT_BEAMS = 'INVERT_BEAMS';\nexport const TOGGLE_RECORDING = 'TOGGLE_RECORDING';\nexport const SAVE_OPACITY = 'SAVE_OPACITY';\nexport const CLEAR_OPACITIES = 'CLEAR_OPACITIES';\nexport const SET_RECONSTRUCTION = 'SET_RECONSTRUCTION';\nexport const SET_FILTER = 'SET_FILTER';\nexport const SET_DELTA_V = 'SET_DELTA_V';\n\n// action shapes\n\nexport interface rayAction {\n  type: typeof SET_RAY_COUNT;\n  payload: number;\n}\n\nexport interface boxAction {\n  type: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX;\n  payload: Matrix;\n}\n\nexport interface invertBeamsAction {\n  type: typeof INVERT_BEAMS;\n}\n\nexport interface toggleRecordingAction {\n  type: typeof TOGGLE_RECORDING;\n}\n\nexport interface saveOpacityAction {\n  type: typeof SAVE_OPACITY;\n  payload: number[];\n}\n\nexport interface clearOpacitiesAction {\n  type: typeof CLEAR_OPACITIES;\n}\n\nexport interface setReconstructionAction {\n  type: typeof SET_RECONSTRUCTION;\n  payload: Uint8ClampedArray[];\n}\n\nexport interface setFilterAction {\n  type: typeof SET_FILTER;\n  payload: boolean;\n}\n\nexport interface setDeltaVAction {\n  type: typeof SET_DELTA_V;\n  payload: number;\n}\n\nconst boxUpdate = (t: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX) => (\n  x: Matrix,\n) => ({\n  type: t,\n  payload: x,\n});\n\n// action creators\n\nexport const updateBox = boxUpdate(UPDATE_BOX);\nexport const updateBeamBox = boxUpdate(UPDATE_BEAM_BOX);\n\nexport const setRayCount = (n: number): rayAction => ({\n  type: SET_RAY_COUNT,\n  payload: n,\n});\n\nexport const invertBeams = (): invertBeamsAction => ({type: INVERT_BEAMS});\n\nexport const saveOpacity = (payload: number[]): saveOpacityAction => ({\n  type: SAVE_OPACITY,\n  payload,\n});\n\nexport const clearOpacities = (): clearOpacitiesAction => ({\n  type: CLEAR_OPACITIES,\n});\n\nexport const toggleRecording = (): toggleRecordingAction => ({\n  type: TOGGLE_RECORDING,\n});\n\nexport const setReconstruction = (\n  payload: Uint8ClampedArray[],\n): setReconstructionAction => ({\n  type: SET_RECONSTRUCTION,\n  payload,\n});\n\nexport const setFilter = (payload: boolean): setFilterAction => ({\n  type: SET_FILTER,\n  payload,\n});\n\nexport const setDeltaV = (payload: number): setDeltaVAction => ({\n  type: SET_DELTA_V,\n  payload,\n});\n\nexport type RadonAction =\n  | boxAction\n  | rayAction\n  | invertBeamsAction\n  | toggleRecordingAction\n  | saveOpacityAction\n  | clearOpacitiesAction\n  | setReconstructionAction\n  | setFilterAction\n  | setDeltaVAction;\n","import React from 'react';\n\ninterface InvButtonProps {\n  inverted: boolean;\n  invert: () => void;\n}\n\nconst InvButton: React.FC<InvButtonProps> = (props: InvButtonProps) => (\n  <div style={{padding: '16px'}}>\n    <button\n      style={{\n        cursor: 'pointer',\n        color: props.inverted ? 'white' : 'black',\n        backgroundColor: props.inverted ? 'black' : 'white',\n        fontSize: '32px',\n        padding: '0px 8px',\n        borderRadius: '8px',\n      }}\n      onClick={props.invert}>\n      Invert\n    </button>\n  </div>\n);\n\ninterface RayCountSliderProps {\n  rayCount: number;\n  maxRayCount: number;\n  numRays: number;\n  setRayCount: (n: number) => void;\n}\n\nconst RayCountSlider: React.FC<RayCountSliderProps> = (\n  props: RayCountSliderProps,\n) => (\n  <div>\n    <h1 style={{color: 'white'}}>\n      {props.rayCount} Beam{props.rayCount > 1 ? 's' : ''}\n    </h1>\n    <input\n      type=\"range\"\n      min={0}\n      max={props.maxRayCount}\n      value={props.numRays}\n      onChange={e => props.setRayCount(parseInt(e.target.value))}\n    />\n  </div>\n);\n\ninterface RecordProps {\n  recording: boolean;\n  toggleRecording: () => void;\n}\n\nconst Record: React.FC<RecordProps> = (props: RecordProps) => (\n  <div\n    style={{\n      color: 'white',\n      cursor: props.recording ? 'not-allowed' : 'pointer',\n      padding: '8px',\n      fontSize: '32px',\n    }}\n    onClick={props.recording ? () => {} : props.toggleRecording}>\n    <span style={{padding: '4px', color: props.recording ? 'gray' : 'white'}}>\n      Record\n    </span>\n    <button\n      style={{\n        cursor: props.recording ? 'not-allowed' : 'pointer',\n        borderRadius: '12px',\n        height: '24px',\n        width: '24px',\n        backgroundColor: props.recording ? 'gray' : 'red',\n      }}\n    />\n  </div>\n);\n\ntype RadonControlsProps = InvButtonProps & RayCountSliderProps & RecordProps;\n\nconst RadonControls: React.FC<RadonControlsProps> = (\n  props: RadonControlsProps,\n) => (\n  <div id=\"controls\">\n    <RayCountSlider {...props} />\n    <InvButton {...props} />\n    <Record {...props} />\n  </div>\n);\n\nexport default RadonControls;\n","import {Matrix, index, floor} from 'mathjs';\nimport {\n  Vector3,\n  Color,\n  MeshPhongMaterial,\n  DoubleSide,\n  BoxGeometry,\n  Raycaster,\n  PlaneGeometry,\n  Material,\n  Mesh,\n  Object3D,\n  MeshBasicMaterial,\n} from 'three';\n\nconst v = (x: number, y: number, z: number) => new Vector3(x, y, z);\nfunction meshColor(color: number) {\n  const co = () => new Color(color);\n  return new MeshPhongMaterial({\n    // light\n    specular: co(),\n    // intermediate\n    color: co().addScalar(-0.3),\n    // dark\n    emissive: co().addScalar(-0.8),\n    shininess: 50,\n    wireframe: false,\n    side: DoubleSide,\n    //map: ImageUtils.loadTexture('http://i.imgur.com/xCE2Br4.jpg?1')\n  });\n}\n\nexport function getRow(m: Matrix, row: number): number[] {\n  return (m.subset(index(row, [0, 1, 2])).toArray() as number[][])[0];\n}\n\nexport function BoxMesh(box: Matrix, color?: number) {\n  const [x, y, z] = getRow(box, 0);\n  const [w, h, d] = getRow(box, 1);\n  const [a, b, c] = getRow(box, 2);\n\n  var geometry = new BoxGeometry(w, h, d);\n\n  geometry.translate(x, y, z);\n  geometry.rotateX(a);\n  geometry.rotateY(b);\n  geometry.rotateZ(c);\n\n  return new Mesh(geometry, meshColor(color || 0xffffff));\n}\n\ninterface beamDataOpts {\n  inv: boolean;\n  recording: boolean;\n  saveOpacity: (o: number[]) => void;\n}\n\nexport function getScreenDataUrl(\n  bbox: Matrix,\n  opacities: number[][],\n  numAngles?: number,\n): string {\n  let [w, h] = getRow(bbox, 1);\n  // here we use * 4 b/c that's how many rotation values we want to capture\n  w = numAngles ? numAngles : w * 4;\n\n  /* // Create canvas */\n  let canvas = document.createElement('canvas');\n  canvas.height = h;\n  canvas.width = w;\n\n  const context = canvas.getContext('2d');\n  if (context === null) return '';\n  const imgData = context.createImageData(w, h);\n\n  // the number of stored opacities should equal the width of the bounding box\n  for (let col = 0; col < opacities.length; col++) {\n    let N = opacities[col] ? opacities[col].length : 0;\n    for (let i = 0; i < N; i++) {\n      const row = Math.floor(i * (h / N) + h / (2 * N));\n      const op = opacities[col][i];\n\n      let pxl = 4 * (row * w + col);\n      imgData.data[pxl] = 255;\n      imgData.data[pxl + 1] = 255;\n      imgData.data[pxl + 2] = 255;\n      imgData.data[pxl + 3] = op;\n    }\n  }\n\n  context.putImageData(imgData, 0, 0);\n  return canvas.toDataURL();\n}\n\nexport function getBeamDataUrl(\n  obj: Object3D,\n  bbox: Matrix,\n  N: number,\n  opts: beamDataOpts,\n): string {\n  const [x, y, z] = getRow(bbox, 0);\n  const [w, h] = getRow(bbox, 1);\n\n  /* // Create canvas */\n  let canvas = document.createElement('canvas');\n  canvas.height = h;\n  canvas.width = w;\n\n  const context = canvas.getContext('2d');\n  if (context === null) return '';\n  const imgData = context.createImageData(w, h);\n\n  let ops = [];\n\n  for (let i = 0; i < N; i++) {\n    const by = Math.floor(y + i * (h / N) + h / (2 * N));\n\n    const start = by * w * 4;\n    const end = start + w * 4;\n\n    // apparently box geometries are centered at the origin\n    // hence the x +- w/2 for the ray start and end\n    const srcPos = v(x - w / 2, h / 2 - by, z);\n    const destPos = v(x + w / 2, h / 2 - by, z);\n\n    const ray = new Raycaster(srcPos, destPos.sub(srcPos).normalize());\n    const intersections = ray.intersectObject(obj);\n\n    let opacity = opts.inv ? 0 : 255;\n    let attStart = end;\n    let dist = 0;\n    let att = 0;\n    switch (intersections.length) {\n      case 2:\n        dist = intersections[1].distance - intersections[0].distance;\n        att = dist / w;\n        opacity = opts.inv ? att * 255 : (1 - att) * 255;\n        attStart = intersections[1].distance;\n        break;\n      case 3:\n      case 4:\n        dist = intersections[2].distance - intersections[1].distance;\n        att = dist / w;\n        opacity = opts.inv ? att * 255 : (1 - att) * 255;\n        attStart = intersections[2].distance;\n        break;\n    }\n\n    const defVal = opts.inv ? 0 : 255;\n\n    for (let j = start; j < end; j += 4) {\n      imgData.data[j] = 255;\n      imgData.data[j + 1] = 255;\n      imgData.data[j + 2] = 255;\n      imgData.data[j + 3] = (j - start) / 4 >= attStart - 2 ? opacity : defVal;\n    }\n\n    ops.push(floor(opacity));\n  }\n\n  if (opts.recording) opts.saveOpacity(ops);\n\n  // put data to context at (0, 0)\n  context.putImageData(imgData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\nexport const normalize = (imgData: ImageData) => {\n  return imgData;\n};\n\nexport const Beams = (bbox: Matrix, material?: Material) => {\n  const [x, y, z] = getRow(bbox, 0);\n  const [w, h] = getRow(bbox, 1);\n  const [a, b, c] = getRow(bbox, 2);\n  const geo = new PlaneGeometry(w, h);\n  geo.rotateX(a);\n  geo.rotateY(b);\n  geo.rotateZ(c);\n  geo.translate(x, y, z);\n\n  const mat = new MeshBasicMaterial({transparent: true, opacity: 0, map: null});\n  return new Mesh(geo, material || mat);\n};\n","import {connect} from 'react-redux';\nimport {ReduxState, ReduxAction} from 'store/reducer';\nimport Controls from 'components/radon/controls';\nimport {getRow} from 'components/radon/utils';\n\nimport {\n  setRayCount,\n  invertBeams,\n  toggleRecording,\n  clearOpacities,\n} from 'store/radon/actions';\n\nconst mapState = (state: ReduxState) => {\n  const h = getRow(state.beamBox, 1)[1];\n  const maxRayCount = Math.ceil(Math.log2(h));\n\n  return {\n    numRays: state.rays,\n    inverted: state.inverted,\n    recording: state.recording,\n    rayCount: Math.pow(2, Math.floor(state.rays)),\n    maxRayCount,\n    opacities: state.opacities,\n  };\n};\n\nconst mapDispatch = (dispatch: (action: ReduxAction) => void) => ({\n  setRayCount: (n: number) => dispatch(setRayCount(n)),\n  invertBeams: () => dispatch(invertBeams()),\n  toggleRecording: () => {\n    // first clear the old recordings then save the new ones\n    dispatch(clearOpacities());\n    dispatch(toggleRecording());\n  },\n  invert: () => dispatch(invertBeams()),\n});\n\nexport default connect(mapState, mapDispatch)(Controls);\n","import React, {FC} from 'react';\n\ninterface InverseProps {\n  filter: boolean;\n  reconstruction: Uint8ClampedArray[];\n  setFilter: (v: boolean) => void;\n}\n\nconst drawReconstruction = (reconstruction: Uint8ClampedArray[]) => (\n  canvas: HTMLCanvasElement,\n) => {\n  if (!canvas || !reconstruction.length) return;\n  const context = canvas.getContext('2d');\n  if (!context) return;\n\n  const w = reconstruction.length;\n  const h = w;\n\n  canvas.height = h;\n  canvas.width = w;\n\n  const imgData = context.createImageData(w, h);\n\n  for (let i = 0; i < w * h * 4; i += 4) {\n    let x = Math.floor(i / (4 * w));\n    let y = Math.floor((i / 4) % w);\n    imgData.data[i] = reconstruction[x][y];\n    imgData.data[i + 1] = reconstruction[x][y];\n    imgData.data[i + 2] = reconstruction[x][y];\n    imgData.data[i + 3] = 255;\n  }\n\n  // put data to context at (0, 0)\n  context.putImageData(imgData, 0, 0);\n};\n\ninterface IControlsProps {\n  filter: boolean;\n  setFilter: (n: boolean) => void;\n}\n\nconst IControls: FC<IControlsProps> = (props: IControlsProps) => {\n  const handleChange = () => props.setFilter(!props.filter);\n  return (\n    <div style={{color: 'white', padding: '8px'}}>\n      <label>filter</label>\n      <input type=\"checkbox\" onChange={handleChange} checked={props.filter} />\n    </div>\n  );\n};\n\nconst Inverse: FC<InverseProps> = (props: InverseProps) => (\n  <div\n    style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    }}>\n    <h1 style={{color: 'white'}}>Inverse</h1>\n    <IControls filter={props.filter} setFilter={props.setFilter} />\n    <canvas\n      style={{\n        width: '300px',\n        height: '300px',\n      }}\n      ref={drawReconstruction(props.reconstruction)}></canvas>\n  </div>\n);\n\nexport default Inverse;\n","import {connect} from 'react-redux';\n\nimport {ReduxState, ReduxAction} from 'store/reducer';\nimport {setFilter} from 'store/radon/actions';\nimport Inverse from 'components/radon/inverse';\n\nconst mapState = (state: ReduxState) => ({\n  bbox: state.beamBox,\n  opacities: state.opacities,\n  maxTheta: state.maxTheta,\n  reconstruction: state.reconstruction,\n  filter: state.filter,\n});\n\nconst mapDispatch = (dispatch: (action: ReduxAction) => void) => ({\n  setFilter: (v: boolean) => dispatch(setFilter(v)),\n});\n\nexport default connect(mapState, mapDispatch)(Inverse);\n","import React, {Component} from 'react';\nimport {Matrix, matrix} from 'mathjs';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {\n    Object3D,\n    Mesh,\n    WebGLRenderer,\n    Camera,\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    TextureLoader,\n    Texture,\n    MeshBasicMaterial,\n} from 'three';\n\nimport RadonControls from 'containers/controls'\n\nimport Inverse from 'containers/inverse'\n\nimport {\n    BoxMesh,\n    Beams,\n    getRow,\n    getBeamDataUrl,\n    getScreenDataUrl,\n} from 'components/radon/utils'\n\n\n\nclass RadonScene {\n    webGLRenderer: WebGLRenderer\n    camera: Camera\n    scene: Scene\n\n    constructor(children: Array<Object3D | Mesh>) {\n        this.webGLRenderer = new WebGLRenderer()\n        this.webGLRenderer.setSize( window.innerWidth, window.innerHeight )\n        this.webGLRenderer.setPixelRatio( window.devicePixelRatio );\n\n        this.scene = new Scene()\n\n        this.camera = new PerspectiveCamera( 80, window.innerWidth / window.innerHeight, 0.1, 1000 )\n        this.camera.position.x = 0\n        this.camera.position.y = 20\n        this.camera.position.z = 100\n\n        var light = new DirectionalLight(0xfdfdfd, 2);\n        // you set the position of the light and it shines into the origin\n        light.position.set(-2, 2, 1).normalize();\n        this.scene.add(light);\n        new OrbitControls(this.camera, this.webGLRenderer.domElement)\n\n        children.forEach(c => this.scene.add(c as Object3D));\n    }\n\n    render() {\n        this.webGLRenderer.render(this.scene, this.camera)\n        return (<div id=\"scene-container\" ref={d => d ? d.appendChild(this.webGLRenderer.domElement) : \"\"}></div>)\n    }\n}\n\n\ninterface RadonProps {\n    box: Matrix;\n    beamBox: Matrix;\n    numRays: number;\n    inverted: boolean;\n    recording: boolean;\n    opacities: number[][];\n    numAngles: number;\n    rotateBox: (n: number) => void;\n    saveOpacity: (o: number[]) => void;\n    endRecording: () => void;\n    theta: number;\n    deltaV: number;\n    setDeltaV: (dv: number) => void;\n}\n\nexport default class Radon extends Component<RadonProps> {\n    rs: RadonScene\n    b: Object3D\n    bb: Object3D\n    screen: Object3D\n    tl: TextureLoader\n    beamData: string\n    // nr = number of angles recorded\n    nr: number\n\n    constructor(props: RadonProps) {\n        super(props)\n\n        this.beamData = ''\n        this.tl = new TextureLoader()\n        this.b = BoxMesh(this.props.box, 0x0000ff)\n        this.bb = Beams(this.props.beamBox)\n        this.nr = 0\n\n        const [x, y, z] = getRow(this.props.beamBox, 0)\n        const [w, h, d] = getRow(this.props.beamBox, 1)\n\n        const N = props.opacities.length\n        this.screen = Beams(matrix([[x+w/2, y, z+N/2],[N,h,d],[0,-Math.PI/2,0]]))\n        this.rs = new RadonScene([\n            this.b,\n            this.bb,\n            this.screen,\n        ])\n\n        const rotateBox = (ms: number) => {\n\n            this.b.rotateZ(this.props.deltaV)\n            this.props.rotateBox(this.props.deltaV)\n\n            const rayCount = Math.pow(2, Math.floor(this.props.numRays))\n\n            const beams = this.bb as Mesh\n            const beamData = getBeamDataUrl(this.b, this.props.beamBox, rayCount, {\n                inv: this.props.inverted,\n                recording: this.props.recording,\n                saveOpacity: this.props.saveOpacity,\n            })\n\n            // only create new beam image if beams have been updated\n            if( beamData && beamData !== this.beamData ) {\n                this.tl.load(beamData, (t: Texture) => {\n                    beams.material = new MeshBasicMaterial({map: t, transparent: true})\n                })\n                this.beamData = beamData\n            }\n\n            const screen = this.screen as Mesh\n\n            const doneRecording = this.nr === this.props.opacities.length\n            if (this.props.recording && doneRecording) {\n                this.nr = 0\n                this.props.endRecording()\n            }\n\n\n            if( this.props.recording ) {\n                this.nr += 1\n\n                const screenData = getScreenDataUrl(this.props.beamBox, this.props.opacities, this.props.numAngles)\n\n                this.tl.load(screenData, (t: Texture) => {\n                    screen.material = new MeshBasicMaterial({map: t, transparent: true})\n                })\n            } \n\n            requestAnimationFrame(rotateBox)\n        }\n\n        requestAnimationFrame(rotateBox)\n    }\n\n    render() {\n        /* this.bb.rotateZ(.01) */\n\n        return (\n            <div>\n            <div style={{\n                  position: 'absolute',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  padding: '16px',\n                }}>\n                <RadonControls />\n                <Inverse />\n            </div>\n                {this.rs.render()}\n            </div>)\n    }\n}\n","import {connect} from 'react-redux';\nimport {matrix} from 'mathjs';\nimport {ReduxState} from 'store/reducer';\nimport {\n  updateBox,\n  RadonAction,\n  saveOpacity,\n  toggleRecording,\n  setDeltaV,\n} from 'store/radon/actions';\nimport RadonScene from 'components/radon/scene';\n\nconst rotateZ = (theta: number) =>\n  matrix([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, theta],\n  ]);\n\nconst mapState = (state: ReduxState) => ({\n  box: state.box,\n  beamBox: state.beamBox,\n  numRays: state.rays,\n  inverted: state.inverted,\n  recording: state.recording,\n  opacities: state.opacities,\n  theta: state.maxTheta / state.opacities.length,\n  numAngles: state.opacities.length,\n  deltaV: state.deltaV,\n});\n\nconst mapDispatch = (dispatch: (action: RadonAction) => void) => ({\n  rotateBox: (theta: number) => dispatch(updateBox(rotateZ(theta))),\n  saveOpacity: (o: number[]) => dispatch(saveOpacity(o)),\n  endRecording: () => {\n    dispatch(toggleRecording());\n  },\n  setDeltaV: (dv: number) => dispatch(setDeltaV(dv)),\n});\n\nexport default connect(mapState, mapDispatch)(RadonScene);\n","import store from 'store';\nimport {setReconstruction} from 'store/radon/actions';\nconst conn = `ws://immense-ridge-35294.herokuapp.com/echo`;\nconst ws = new WebSocket(conn);\n\ninterface ImageResponse {\n  image: Uint8ClampedArray[];\n}\n\nfunction str2ab(s: string) {\n  var buf = new ArrayBuffer(s.length); // 1 bytes for each char\n  var bufView = new Uint8ClampedArray(buf);\n  for (var i = 0, strLen = s.length; i < strLen; i++) {\n    bufView[i] = s.charCodeAt(i);\n  }\n  return bufView;\n}\n\nfunction deserialize(resp: string): ImageResponse {\n  const json = JSON.parse(resp);\n\n  return {\n    // Golang json package serializes arrays of bytes / uint8\n    // as base64 encoded string. Therefore, we first decode\n    // the string from base64 to utf-8, then convert each\n    // character into an number.\n    image: json.image.map(atob).map(str2ab),\n  };\n}\n\nws.onopen = function() {\n  console.log('OPEN');\n};\n\nws.onclose = function() {\n  console.log('CLOSE');\n};\n\nws.onmessage = function(evt: MessageEvent) {\n  const resp = deserialize(evt.data);\n  store.dispatch(setReconstruction(resp.image));\n};\n\nws.onerror = function(evt: Event) {\n  console.log('ERROR: ');\n  console.log(evt);\n};\n\ninterface UploadSinoRequest {\n  total: number;\n  theta: number;\n  sino_row: number[];\n  filter: boolean;\n}\n\nexport function send(req: UploadSinoRequest) {\n  ws.send(JSON.stringify(req));\n}\n","import {add, Matrix, matrix, index} from 'mathjs';\nimport {combineReducers} from 'redux';\nimport {\n  boxAction,\n  rayAction,\n  invertBeamsAction,\n  toggleRecordingAction,\n  setReconstructionAction,\n  setFilterAction,\n  setDeltaVAction,\n  RadonAction,\n  UPDATE_BOX,\n  UPDATE_BEAM_BOX,\n  SET_RAY_COUNT,\n  INVERT_BEAMS,\n  TOGGLE_RECORDING,\n  SAVE_OPACITY,\n  CLEAR_OPACITIES,\n  SET_RECONSTRUCTION,\n  SET_FILTER,\n  SET_DELTA_V,\n} from 'store/radon/actions';\nimport {send} from 'store/radon/socket';\nimport {getRow} from 'components/radon/utils';\n\nconst initialBoxState = matrix([\n  [0, 0, 0],\n  [32, 64, 8],\n  [0, 0, 0],\n]);\n\nconst modAngles = (m: Matrix) => {\n  const anglesIdx = index(2, [0, 1, 2]);\n  let angles = m.subset(anglesIdx).map(a => a % (2 * Math.PI));\n  m.subset(anglesIdx, angles);\n  return m;\n};\n\nconst box = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBoxState;\n  return action.type === UPDATE_BOX\n    ? (modAngles(add(action.payload, state) as Matrix) as Matrix)\n    : state;\n};\n\nconst rays = (state: number | undefined, action: rayAction) => {\n  if (state === undefined) return 0;\n  return action.type === SET_RAY_COUNT ? action.payload : state;\n};\n\n// N the number of angles to measure\nconst N = 128;\nconst BB_WIDTH = 128;\nconst BB_HEIGHT = 128;\nconst initialBeamBoxState = matrix([\n  [0, 0, 0],\n  [BB_WIDTH, BB_HEIGHT, 4],\n  [0, 0, 0],\n]);\n\nconst beamBox = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBeamBoxState;\n  return action.type === UPDATE_BEAM_BOX\n    ? (add(action.payload, state) as Matrix)\n    : state;\n};\n\nconst inverted = (state: boolean | undefined, action: invertBeamsAction) => {\n  return action.type === INVERT_BEAMS ? !state : !!state;\n};\n\nconst recording = (\n  state: boolean | undefined,\n  action: toggleRecordingAction,\n) => {\n  if (state === undefined) return false;\n\n  return action.type === TOGGLE_RECORDING ? !state : state;\n};\n\nconst opacities = (state: number[][] | undefined, action: RadonAction) => {\n  if (state === undefined) return Array(N);\n\n  switch (action.type) {\n    case SAVE_OPACITY:\n      let out = Array.of(...state);\n      out.unshift(action.payload);\n      out.pop();\n      return out;\n    case CLEAR_OPACITIES:\n      return new Array(N);\n    default:\n      return state;\n  }\n};\n\nconst reconstruction = (\n  state: Uint8ClampedArray[] | undefined,\n  action: setReconstructionAction,\n): Uint8ClampedArray[] => {\n  if (state === undefined) return [];\n\n  return action.type === SET_RECONSTRUCTION ? action.payload : state;\n};\n\nconst filter = (\n  state: boolean | undefined,\n  action: setFilterAction,\n): boolean => {\n  return action.type === SET_FILTER ? action.payload : !!state;\n};\n\nconst deltaV = (state: number | undefined, action: setDeltaVAction): number => {\n  if (state === undefined) {\n    return 0.01;\n  }\n\n  return action.type === SET_DELTA_V ? action.payload : state;\n};\n\nconst radon = combineReducers({\n  beamBox,\n  box,\n  deltaV,\n  rays,\n  inverted,\n  recording,\n  reconstruction,\n  opacities,\n  filter,\n  maxTheta: () => Math.PI,\n  cyclesPerSec: () => 1 / 20,\n});\n\nexport type radonState = ReturnType<typeof radon>;\n\nexport default (state: radonState | undefined, action: RadonAction) => {\n  if (state !== undefined && action.type === SAVE_OPACITY) {\n    send({\n      theta: getRow(state.box, 2)[2],\n      total: state.opacities.length,\n      sino_row: action.payload,\n      filter: state.filter,\n    });\n  }\n\n  return radon(state, action);\n};\n","import radon from 'store/radon/reducers';\nimport {RadonAction} from 'store/radon/actions';\n\nconst reducer = radon;\nexport type ReduxState = ReturnType<typeof reducer>;\nexport type ReduxAction = RadonAction;\nexport default reducer;\n","import reducer from 'store/reducer';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport RadonScene from 'containers/radon';\nimport store from 'store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <RadonScene />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}