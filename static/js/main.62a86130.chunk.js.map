{"version":3,"sources":["store/webgl/types.ts","store/webgl/reducers.ts","store/projections/types.ts","store/projections/reducers.ts","store/radon/actions.ts","store/radon/reducers.ts","store/reducer.ts","components/radon/controls.tsx","components/radon/utils.ts","components/radon/scene.tsx","containers/radon.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["WebGLActionType","MutationActionType","initialState","context","undefined","payloadSetter","t","state","action","type","payload","anchor","SET_ANCHOR","originalRotation","SET_ORIGINAL_ROTATION","rotationDelta","SET_ROTATION_DELTA","combineReducers","rotation","ROTATE","MODIFY_ROTATION","add","valueOf","translation","TRANSLATE","scale","SCALE","MODIFY_SCALE","boxUpdate","x","updateBox","updateBeamBox","initialBoxState","matrix","initialBeamBoxState","radon","beamBox","box","rays","inverted","recording","opacities","Array","BB_WIDTH","out","of","unshift","pop","reducer","webgl","SET_CONTEXT","projections","InvButton","props","style","padding","cursor","color","backgroundColor","fontSize","borderRadius","onClick","invert","RayCountSlider","rayCount","min","max","maxRayCount","value","numRays","onChange","e","setRayCount","parseInt","target","Record","toggleRecording","height","width","RadonControls","id","position","display","flexDirection","alignItems","v","y","z","Vector3","getRow","m","row","subset","index","toArray","BoxMesh","w","h","d","a","b","c","geometry","BoxGeometry","translate","rotateX","rotateY","rotateZ","Mesh","co","Color","MeshPhongMaterial","specular","addScalar","emissive","shininess","wireframe","side","DoubleSide","meshColor","Beams","bbox","material","geo","PlaneGeometry","mat","MeshBasicMaterial","transparent","opacity","map","RadonScene","children","webGLRenderer","camera","scene","this","WebGLRenderer","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","Scene","PerspectiveCamera","light","DirectionalLight","set","normalize","OrbitControls","domElement","forEach","render","ref","appendChild","Radon","rs","bb","screen","tl","beamData","TextureLoader","Math","PI","theta","requestAnimationFrame","rotateBox","pow","floor","beams","obj","N","opts","canvas","document","createElement","getContext","imgData","createImageData","ops","i","by","start","end","srcPos","destPos","intersections","Raycaster","sub","intersectObject","inv","attStart","att","length","distance","defVal","j","data","push","saveOpacity","putImageData","toDataURL","getBeamDataUrl","load","screenData","fLimit","col","faded","op","pxl","getScreenDataUrl","ceil","log2","invertBeams","Component","connect","dispatch","rotateBeamBox","n","o","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a86130.chunk.js","sourcesContent":["export type Mat4 = [\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n    number, number, number, number,\n];\n\nexport interface WebGLState {\n    context: WebGLRenderingContext | undefined;\n}\n\nexport enum WebGLActionType {\n    SET_CONTEXT = 'SET_CONTEXT'\n}\n\nexport interface SetWebGLContextAction {\n    type: WebGLActionType;\n    payload: WebGLRenderingContext;\n}\n\nexport type WebGLAction = SetWebGLContextAction","import {WebGLState, WebGLAction, WebGLActionType} from 'store/webgl/types'\n\nvar initialState: WebGLState = {\n    context: undefined,\n};\n\nexport default function reducer(\n    state = initialState,\n    action: WebGLAction\n): WebGLState {\n    if (action === undefined ) {\n        return state;\n    }\n\n    switch(action.type) {\n        case WebGLActionType.SET_CONTEXT:\n            return {context: action.payload};\n        default:\n            return state;\n    }\n}","import {Vec3} from 'store/types';\nexport interface MutationState {\n  rotation: Vec3;\n  translation: Vec3;\n  scale: Vec3;\n  rotationDelta: Vec3 | null;\n  originalRotation: Vec3 | null;\n  anchor: Vec3 | null;\n}\n\nexport enum MutationActionType {\n  ROTATE = 'ROTATE',\n  TRANSLATE = 'TRANSLATE',\n  SCALE = 'SCALE',\n  MODIFY_SCALE = 'MODIFY_SCALE',\n  MODIFY_ROTATION = 'MODIFY_ROTATION',\n  SET_ANCHOR = 'SET_ANCHOR',\n  SET_ORIGINAL_ROTATION = 'SET_ORIGINAL_ROTATION',\n  SET_ROTATION_DELTA = 'SET_ROTATION_DELTA',\n  CALC_ROT = 'CALC_ROT',\n}\n\nexport interface MutationAction {\n  type: MutationActionType;\n  payload: Vec3 | null;\n}\n","import {\n  MutationState,\n  MutationAction,\n  MutationActionType,\n} from 'store/projections/types';\nimport {Vec3} from 'store/types';\nimport {add} from 'mathjs';\nimport {combineReducers} from 'redux';\n\nfunction payloadSetter(t: MutationActionType) {\n  return function(state: Vec3 | undefined | null, action: MutationAction) {\n    if (state === undefined) return null;\n    if (action.type !== t) return state;\n    return action.payload;\n  };\n}\n\nconst anchor = payloadSetter(MutationActionType.SET_ANCHOR);\nconst originalRotation = payloadSetter(\n  MutationActionType.SET_ORIGINAL_ROTATION,\n);\nconst rotationDelta = payloadSetter(MutationActionType.SET_ROTATION_DELTA);\n\nfunction translation(\n  translation: Vec3 = [0, 0, 0],\n  action: MutationAction,\n): Vec3 {\n  if (action.type !== MutationActionType.TRANSLATE) return translation;\n\n  if (action.payload === null) return translation;\n\n  return action.payload;\n}\n\nfunction scale(scale: Vec3 = [1, 1, 1], action: MutationAction) {\n  if (!action.payload) return scale;\n\n  switch (action.type) {\n    case MutationActionType.SCALE:\n      return action.payload;\n    case MutationActionType.MODIFY_SCALE:\n      return add(scale, action.payload).valueOf() as Vec3;\n    default:\n      return scale;\n  }\n}\n\nfunction rotation(rotation: Vec3 = [0, 0, 0], action: MutationAction) {\n  if (!action.payload) return rotation;\n\n  switch (action.type) {\n    case MutationActionType.ROTATE:\n      return action.payload;\n    case MutationActionType.MODIFY_ROTATION:\n      return add(rotation, action.payload).valueOf() as Vec3;\n    default:\n      return rotation;\n  }\n}\n\nexport default combineReducers<MutationState, MutationAction>({\n  rotation,\n  translation,\n  scale,\n  anchor,\n  originalRotation,\n  rotationDelta,\n});\n","import {Matrix} from 'mathjs';\n\n// action types\n\nexport const UPDATE_BOX = 'UPDATE_BOX';\nexport const UPDATE_BEAM_BOX = 'UPDATE_BEAM_BOX';\nexport const SET_RAY_COUNT = 'SET_RAY_COUNT';\nexport const INVERT_BEAMS = 'INVERT_BEAMS';\nexport const TOGGLE_RECORDING = 'TOGGLE_RECORDING';\nexport const SAVE_OPACITY = 'SAVE_OPACITY';\n\n// action shapes\n\nexport interface rayAction {\n  type: typeof SET_RAY_COUNT;\n  payload: number;\n}\n\nexport interface boxAction {\n  type: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX;\n  payload: Matrix;\n}\n\nexport interface invertBeamsAction {\n  type: typeof INVERT_BEAMS;\n}\n\nexport interface toggleRecordingAction {\n  type: typeof TOGGLE_RECORDING;\n}\n\nexport interface saveOpacityAction {\n  type: typeof SAVE_OPACITY;\n  payload: number[];\n}\n\nexport type RadonAction =\n  | boxAction\n  | rayAction\n  | invertBeamsAction\n  | toggleRecordingAction\n  | saveOpacityAction;\n\nconst boxUpdate = (t: typeof UPDATE_BOX | typeof UPDATE_BEAM_BOX) => (\n  x: Matrix,\n) => ({\n  type: t,\n  payload: x,\n});\n\n// action creators\n\nexport const updateBox = boxUpdate(UPDATE_BOX);\nexport const updateBeamBox = boxUpdate(UPDATE_BEAM_BOX);\n\nexport const setRayCount = (n: number): rayAction => ({\n  type: SET_RAY_COUNT,\n  payload: n,\n});\n\nexport const invertBeams = (): invertBeamsAction => ({type: INVERT_BEAMS});\n\nexport const saveOpacity = (payload: number[]): saveOpacityAction => ({\n  type: SAVE_OPACITY,\n  payload,\n});\n\nexport const toggleRecording = (): toggleRecordingAction => ({\n  type: TOGGLE_RECORDING,\n});\n","import {add, Matrix, matrix} from 'mathjs';\nimport {combineReducers} from 'redux';\nimport {\n  boxAction,\n  rayAction,\n  invertBeamsAction,\n  toggleRecordingAction,\n  saveOpacityAction,\n  UPDATE_BOX,\n  UPDATE_BEAM_BOX,\n  SET_RAY_COUNT,\n  INVERT_BEAMS,\n  TOGGLE_RECORDING,\n  SAVE_OPACITY,\n} from 'store/radon/actions';\n\nconst initialBoxState = matrix([[0, 0, 0], [32, 16, 8], [0, 0, 0]]);\n\nconst box = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBoxState;\n  return action.type === UPDATE_BOX\n    ? (add(action.payload, state) as Matrix)\n    : state;\n};\n\nconst rays = (state: number | undefined, action: rayAction) => {\n  if (state === undefined) return 0;\n  return action.type === SET_RAY_COUNT ? action.payload : state;\n};\n\nconst BB_WIDTH = 64;\nconst BB_HEIGHT = 64;\nconst initialBeamBoxState = matrix([\n  [0, 0, 0],\n  [BB_WIDTH, BB_HEIGHT, 4],\n  [0, 0, 0],\n]);\n\nconst beamBox = (state: Matrix | undefined, action: boxAction) => {\n  if (state === undefined) return initialBeamBoxState;\n  return action.type === UPDATE_BEAM_BOX\n    ? (add(action.payload, state) as Matrix)\n    : state;\n};\n\nconst inverted = (state: boolean | undefined, action: invertBeamsAction) => {\n  return action.type === INVERT_BEAMS ? !state : !!state;\n};\n\nconst recording = (\n  state: boolean | undefined,\n  action: toggleRecordingAction,\n) => {\n  if (state === undefined) return false;\n\n  return action.type === TOGGLE_RECORDING ? !state : state;\n};\n\nconst opacities = (\n  state: number[][] | undefined,\n  action: saveOpacityAction,\n) => {\n  // here we use * 4 b/c that's how many rotation values we want to capture\n  if (state === undefined) return Array(BB_WIDTH * 4);\n\n  if (action.type === SAVE_OPACITY) {\n    let out = Array.of(...state);\n    out.unshift(action.payload);\n    out.pop();\n    return out;\n  }\n\n  return state;\n};\n\nconst radon = combineReducers({\n  beamBox,\n  box,\n  rays,\n  inverted,\n  recording,\n  opacities,\n});\n\nexport default radon;\nexport type radonState = ReturnType<typeof radon>;\n","import webgl from 'store/webgl/reducers';\nimport {WebGLAction} from 'store/webgl/types';\nimport projections from 'store/projections/reducers';\nimport radon from 'store/radon/reducers';\nimport {RadonAction} from 'store/radon/actions';\nimport {MutationAction} from 'store/projections/types';\nimport {combineReducers} from 'redux';\n\nconst reducer = combineReducers({\n  webgl,\n  projections,\n  radon,\n});\n\nexport type ReduxState = ReturnType<typeof reducer>;\nexport type ReduxAction = WebGLAction | MutationAction | RadonAction;\nexport default reducer;\n","import React from 'react';\n\ninterface InvButtonProps {\n  inverted: boolean;\n  invert: () => void;\n}\n\nconst InvButton: React.FC<InvButtonProps> = (props: InvButtonProps) => (\n  <div style={{padding: '16px'}}>\n    <button\n      style={{\n        cursor: 'pointer',\n        color: props.inverted ? 'white' : 'black',\n        backgroundColor: props.inverted ? 'black' : 'white',\n        fontSize: '32px',\n        padding: '0px 8px',\n        borderRadius: '8px',\n      }}\n      onClick={props.invert}>\n      Invert\n    </button>\n  </div>\n);\n\ninterface RayCountSliderProps {\n  rayCount: number;\n  maxRayCount: number;\n  numRays: number;\n  setRayCount: (n: number) => void;\n}\n\nconst RayCountSlider: React.FC<RayCountSliderProps> = (\n  props: RayCountSliderProps,\n) => (\n  <div>\n    <h1 style={{color: 'white'}}>\n      {props.rayCount} Beam{props.rayCount > 1 ? 's' : ''}\n    </h1>\n    <input\n      type=\"range\"\n      min={0}\n      max={props.maxRayCount}\n      value={props.numRays}\n      onChange={e => props.setRayCount(parseInt(e.target.value))}\n    />\n  </div>\n);\n\ninterface RecordProps {\n  recording: boolean;\n  toggleRecording: () => void;\n}\n\nconst Record: React.FC<RecordProps> = (props: RecordProps) => (\n  <div\n    style={{\n      color: 'white',\n      cursor: 'pointer',\n      padding: '8px',\n      fontSize: '32px',\n    }}\n    onClick={props.toggleRecording}>\n    <span style={{padding: '4px'}}>{props.recording ? 'Stop' : 'Record'}</span>\n    <button\n      style={{\n        cursor: 'pointer',\n        borderRadius: props.recording ? '0px' : '12px',\n        height: '24px',\n        width: '24px',\n        backgroundColor: props.recording ? 'rgba(0, 0, 0, 0)' : 'red',\n      }}\n    />\n  </div>\n);\n\ntype RadonControlsProps = InvButtonProps & RayCountSliderProps & RecordProps;\n\nexport const RadonControls: React.FC<RadonControlsProps> = (\n  props: RadonControlsProps,\n) => (\n  <div\n    id=\"controls\"\n    style={{\n      position: 'absolute',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: '16px',\n    }}>\n    <RayCountSlider {...props} />\n    <InvButton {...props} />\n    <Record {...props} />\n  </div>\n);\n","import {Matrix, index} from 'mathjs';\nimport {\n  Vector3,\n  Color,\n  MeshPhongMaterial,\n  DoubleSide,\n  BoxGeometry,\n  Raycaster,\n  PlaneGeometry,\n  Material,\n  Mesh,\n  Object3D,\n  MeshBasicMaterial,\n} from 'three';\n\nconst v = (x: number, y: number, z: number) => new Vector3(x, y, z);\nfunction meshColor(color: number) {\n  const co = () => new Color(color);\n  return new MeshPhongMaterial({\n    // light\n    specular: co(),\n    // intermediate\n    color: co().addScalar(-0.3),\n    // dark\n    emissive: co().addScalar(-0.8),\n    shininess: 50,\n    wireframe: false,\n    side: DoubleSide,\n    //map: ImageUtils.loadTexture('http://i.imgur.com/xCE2Br4.jpg?1')\n  });\n}\n\nexport function getRow(m: Matrix, row: number): number[] {\n  return (m.subset(index(row, [0, 1, 2])).toArray() as number[][])[0];\n}\n\nexport function BoxMesh(box: Matrix, color?: number) {\n  const [x, y, z] = getRow(box, 0);\n  const [w, h, d] = getRow(box, 1);\n  const [a, b, c] = getRow(box, 2);\n\n  var geometry = new BoxGeometry(w, h, d);\n\n  geometry.translate(x, y, z);\n  geometry.rotateX(a);\n  geometry.rotateY(b);\n  geometry.rotateZ(c);\n\n  return new Mesh(geometry, meshColor(color || 0xffffff));\n}\n\ninterface beamDataOpts {\n  inv: boolean;\n  recording: boolean;\n  saveOpacity: (o: number[]) => void;\n}\n\nexport function getScreenDataUrl(bbox: Matrix, opacities: number[][]): string {\n  let [w, h] = getRow(bbox, 1);\n  // here we use * 4 b/c that's how many rotation values we want to capture\n  w = w * 4;\n\n  /* // Create canvas */\n  let canvas = document.createElement('canvas');\n  canvas.height = h;\n  canvas.width = w;\n\n  const context = canvas.getContext('2d');\n  if (context === null) return '';\n  const imgData = context.createImageData(w, h);\n\n  const fLimit = opacities.length / 4;\n\n  // the number of stored opacities should equal the width of the bounding box\n  for (let col = 0; col < opacities.length; col++) {\n    let N = opacities[col] ? opacities[col].length : 0;\n    for (let i = 0; i < N; i++) {\n      const row = Math.floor(i * (h / N) + h / (2 * N));\n      // row * w * 4 + col * 4\n      // 4 * (row * w + col)\n\n      const faded = col >= opacities.length - fLimit;\n      const x = opacities.length - col;\n      const op = opacities[col][i];\n\n      let pxl = 4 * (row * w + col);\n      imgData.data[pxl] = 255;\n      imgData.data[pxl + 1] = 255;\n      imgData.data[pxl + 2] = 255;\n      imgData.data[pxl + 3] = faded ? op - (fLimit - x) * (op / fLimit) : op;\n    }\n  }\n\n  context.putImageData(imgData, 0, 0);\n  return canvas.toDataURL();\n}\n\nexport function getBeamDataUrl(\n  obj: Object3D,\n  bbox: Matrix,\n  N: number,\n  opts: beamDataOpts,\n): string {\n  const [x, y, z] = getRow(bbox, 0);\n  const [w, h] = getRow(bbox, 1);\n\n  /* // Create canvas */\n  let canvas = document.createElement('canvas');\n  canvas.height = h;\n  canvas.width = w;\n\n  const context = canvas.getContext('2d');\n  if (context === null) return '';\n  const imgData = context.createImageData(w, h);\n\n  let ops = [];\n\n  for (let i = 0; i < N; i++) {\n    const by = Math.floor(y + i * (h / N) + h / (2 * N));\n\n    const start = by * w * 4;\n    const end = start + w * 4;\n\n    // apparently box geometries are centered at the origin\n    // hence the x +- w/2 for the ray start and end\n    const srcPos = v(x - w / 2, h / 2 - by, z);\n    const destPos = v(x + w / 2, h / 2 - by, z);\n\n    const ray = new Raycaster(srcPos, destPos.sub(srcPos).normalize());\n    const intersections = ray.intersectObject(obj);\n\n    let opacity = opts.inv ? 0 : 255;\n    let attStart = end;\n    let dist = 0;\n    let att = 0;\n    switch (intersections.length) {\n      case 2:\n        dist = intersections[1].distance - intersections[0].distance;\n        att = dist / 40;\n        opacity = opts.inv ? att * 255 : (1 - att) * 255;\n        attStart = intersections[1].distance;\n        break;\n      case 4:\n        dist = intersections[2].distance - intersections[1].distance;\n        att = dist / 40;\n        opacity = opts.inv ? att * 255 : (1 - att) * 255;\n        attStart = intersections[2].distance;\n        break;\n    }\n\n    const defVal = opts.inv ? 0 : 255;\n\n    for (let j = start; j < end; j += 4) {\n      imgData.data[j] = 255;\n      imgData.data[j + 1] = 255;\n      imgData.data[j + 2] = 255;\n      imgData.data[j + 3] = (j - start) / 4 >= attStart - 2 ? opacity : defVal;\n    }\n\n    ops.push(opacity);\n  }\n\n  if (opts.recording) opts.saveOpacity(ops);\n\n  // put data to context at (0, 0)\n  context.putImageData(imgData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\nexport const Beams = (bbox: Matrix, material?: Material) => {\n  const [x, y, z] = getRow(bbox, 0);\n  const [w, h] = getRow(bbox, 1);\n  const [a, b, c] = getRow(bbox, 2);\n  const geo = new PlaneGeometry(w, h);\n  geo.rotateX(a);\n  geo.rotateY(b);\n  geo.rotateZ(c);\n  geo.translate(x, y, z);\n\n  const mat = new MeshBasicMaterial({transparent: true, opacity: 0, map: null});\n  return new Mesh(geo, material || mat);\n};\n","import React, {Component} from 'react';\nimport {Matrix, matrix} from 'mathjs';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {\n    Object3D,\n    Mesh,\n    WebGLRenderer,\n    Camera,\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    TextureLoader,\n    Texture,\n    MeshBasicMaterial,\n} from 'three';\n\nimport {\n    RadonControls\n} from 'components/radon/controls'\n\nimport {\n    BoxMesh,\n    Beams,\n    getRow,\n    getBeamDataUrl,\n    getScreenDataUrl,\n} from 'components/radon/utils'\n\n\n\nclass RadonScene {\n    webGLRenderer: WebGLRenderer\n    camera: Camera\n    scene: Scene\n\n    constructor(children: Array<Object3D | Mesh>) {\n        this.webGLRenderer = new WebGLRenderer()\n        this.webGLRenderer.setSize( window.innerWidth, window.innerHeight )\n        this.webGLRenderer.setPixelRatio( window.devicePixelRatio );\n\n        this.scene = new Scene()\n\n        this.camera = new PerspectiveCamera( 80, window.innerWidth / window.innerHeight, 0.1, 1000 )\n        this.camera.position.x = 0\n        this.camera.position.y = 20\n        this.camera.position.z = 100\n\n        var light = new DirectionalLight(0xfdfdfd, 2);\n        // you set the position of the light and it shines into the origin\n        light.position.set(-2, 2, 1).normalize();\n        this.scene.add(light);\n        new OrbitControls(this.camera, this.webGLRenderer.domElement)\n\n        children.forEach(c => this.scene.add(c as Object3D));\n    }\n\n    render() {\n        this.webGLRenderer.render(this.scene, this.camera)\n        return (<div id=\"scene-container\" ref={d => d ? d.appendChild(this.webGLRenderer.domElement) : \"\"}></div>)\n    }\n}\n\n\ninterface RadonProps {\n    box: Matrix;\n    beamBox: Matrix;\n    numRays: number;\n    inverted: boolean;\n    recording: boolean;\n    opacities: number[][];\n    rotateBox: (n: number) => void;\n    setRayCount: (n: number) => void;\n    invertBeams: () => void;\n    saveOpacity: (o: number[]) => void;\n    toggleRecording: () => void;\n}\n\nexport default class Radon extends Component<RadonProps> {\n    rs: RadonScene\n    b: Object3D\n    bb: Object3D\n    screen: Object3D\n    tl: TextureLoader\n    beamData: string\n    recording: boolean\n\n    constructor(props: RadonProps) {\n        super(props)\n\n        this.beamData = ''\n        this.recording = false\n        this.tl = new TextureLoader()\n        this.b = BoxMesh(this.props.box, 0x0000ff)\n        this.bb = Beams(this.props.beamBox)\n\n        const [x, y, z] = getRow(this.props.beamBox, 0)\n        const [w, h, d] = getRow(this.props.beamBox, 1)\n\n        this.screen = Beams(matrix([[x+w/2, y, z+w/2],[w,h,d],[0,-Math.PI/2,0]]))\n        this.rs = new RadonScene([\n            this.b,\n            this.bb,\n            this.screen,\n        ])\n\n        // here we use * 4 b/c that's how many rotation values we want to capture\n        const theta = Math.PI/(w*4)\n\n        const rotateBox = () => {\n            this.b.rotateZ(theta)\n            this.props.rotateBox(theta)\n\n            const rayCount = Math.pow(2, Math.floor(this.props.numRays))\n\n            const beams = this.bb as Mesh\n            const beamData = getBeamDataUrl(this.b, this.props.beamBox, rayCount, {\n                inv: this.props.inverted,\n                recording: this.props.recording,\n                saveOpacity: this.props.saveOpacity,\n            })\n\n            // only create new beam image if beams have been updated\n            if( beamData && beamData !== this.beamData ) {\n                this.tl.load(beamData, (t: Texture) => {\n                    beams.material = new MeshBasicMaterial({map: t, transparent: true})\n                })\n                this.beamData = beamData\n            }\n\n            const screen = this.screen as Mesh\n\n            if( this.props.recording ) {\n                const screenData = getScreenDataUrl(this.props.beamBox, this.props.opacities)\n\n                this.tl.load(screenData, (t: Texture) => {\n                    screen.material = new MeshBasicMaterial({map: t, transparent: true})\n                })\n                this.recording = true\n            } else if( this.recording && !this.props.recording ) {\n                // only hide the recording screen when state changes, not every\n                // loop where recording is off\n                screen.material = new MeshBasicMaterial({transparent: true, opacity: 0})\n                this.recording = false\n            }\n\n            requestAnimationFrame(rotateBox)\n        }\n\n        requestAnimationFrame(rotateBox)\n    }\n\n    render() {\n        /* this.bb.rotateZ(.01) */\n        const h = getRow(this.props.beamBox, 1)[1]\n        const maxRayCount = Math.ceil(Math.log2(h))\n        const rayCount = Math.pow(2, Math.floor(this.props.numRays))\n\n        return (\n            <div>\n                <RadonControls\n                    inverted={this.props.inverted}\n                    invert={this.props.invertBeams}\n                    rayCount={rayCount}\n                    maxRayCount={maxRayCount}\n                    numRays={this.props.numRays}\n                    setRayCount={this.props.setRayCount}\n                    recording={this.props.recording}\n                    toggleRecording={this.props.toggleRecording}\n                    />\n                {this.rs.render()}\n            </div>)\n    }\n}\n","import {connect} from 'react-redux';\nimport {matrix} from 'mathjs';\nimport {ReduxState} from 'store/reducer';\nimport {\n  updateBox,\n  updateBeamBox,\n  setRayCount,\n  RadonAction,\n  invertBeams,\n  saveOpacity,\n  toggleRecording,\n} from 'store/radon/actions';\nimport RadonScene from 'components/radon/scene';\n\nconst rotateZ = (theta: number) =>\n  matrix([[0, 0, 0], [0, 0, 0], [0, 0, theta]]);\n\nconst mapState = (state: ReduxState) => ({\n  box: state.radon.box,\n  beamBox: state.radon.beamBox,\n  numRays: state.radon.rays,\n  inverted: state.radon.inverted,\n  recording: state.radon.recording,\n  opacities: state.radon.opacities,\n});\n\nconst mapDispatch = (dispatch: (action: RadonAction) => void) => ({\n  rotateBox: (theta: number) => dispatch(updateBox(rotateZ(theta))),\n  rotateBeamBox: (theta: number) => dispatch(updateBeamBox(rotateZ(theta))),\n  setRayCount: (n: number) => dispatch(setRayCount(n)),\n  invertBeams: () => dispatch(invertBeams()),\n  saveOpacity: (o: number[]) => dispatch(saveOpacity(o)),\n  toggleRecording: () => dispatch(toggleRecording()),\n});\n\nexport default connect(\n  mapState,\n  mapDispatch,\n)(RadonScene);\n","import React from 'react';\nimport './App.css';\nimport reducer from 'store/reducer';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk'\nimport RadonScene from 'containers/radon';\n// import ConfigPanel from 'containers/mutations/config-panel';\n// import ShaderCanvas from 'containers/canvas/shader-canvas'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(thunk),\n))\n\n/* <ConfigPanel />\n<ShaderCanvas /> */\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <RadonScene />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}